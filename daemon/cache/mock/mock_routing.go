// Code generated by MockGen. DO NOT EDIT.
// Source: app/daemon/cache/routing.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/iij/legs-client/daemon/model"
)

// MockRoutingCache is a mock of RoutingCache interface
type MockRoutingCache struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingCacheMockRecorder
}

// MockRoutingCacheMockRecorder is the mock recorder for MockRoutingCache
type MockRoutingCacheMockRecorder struct {
	mock *MockRoutingCache
}

// NewMockRoutingCache creates a new mock instance
func NewMockRoutingCache(ctrl *gomock.Controller) *MockRoutingCache {
	mock := &MockRoutingCache{ctrl: ctrl}
	mock.recorder = &MockRoutingCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutingCache) EXPECT() *MockRoutingCacheMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockRoutingCache) Update(arg0 *model.Routing) {
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update
func (mr *MockRoutingCacheMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoutingCache)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockRoutingCache) Delete(arg0 *model.Routing) {
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete
func (mr *MockRoutingCacheMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoutingCache)(nil).Delete), arg0)
}

// FindRouting mocks base method
func (m *MockRoutingCache) FindRouting(key string) []model.Routing {
	ret := m.ctrl.Call(m, "FindRouting", key)
	ret0, _ := ret[0].([]model.Routing)
	return ret0
}

// FindRouting indicates an expected call of FindRouting
func (mr *MockRoutingCacheMockRecorder) FindRouting(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRouting", reflect.TypeOf((*MockRoutingCache)(nil).FindRouting), key)
}

// run mocks base method
func (m *MockRoutingCache) run() {
	m.ctrl.Call(m, "run")
}

// run indicates an expected call of run
func (mr *MockRoutingCacheMockRecorder) run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockRoutingCache)(nil).run))
}
